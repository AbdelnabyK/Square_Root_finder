library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
entity arch1 is
    generic (
        n : integer := 32
    );
    port (
        clk          : in  std_logic;                       
        reset_n      : in  std_logic;                     
        start        : in  std_logic;                       
        A : in  unsigned((2 * n) - 1 downto 0);  
        root         : out unsigned(n - 1 downto 0);       
        finished     : out std_logic                       
    );
end arch1;

architecture rtl of arch1 is
    type state_type is (SAMPLE, IDLE, COMPUTING, DONE);
    signal state : state_type := SAMPLE;
    signal finished_flag : std_logic := '0';
    signal input_value  : integer := 0;
    signal root_guess   : integer := 0;   
begin
    process(clk, reset_n) is
        variable next_guess   : integer;
    begin 
        if reset_n = '0' then
            state <= IDLE;
            finished_flag <= '0';
            next_guess := 0;
            input_value <= 0;
            root_guess <= 0;
        elsif rising_edge(clk) then   --10#106276  10#1194877489
            case state is
                when SAMPLE =>
                    input_value <= to_integer(A);
                    root_guess <= 10; --to_integer(unsigned(A(A'high downto A'high - n + 1))) / 2;
                    finished_flag <= '0';
                    if start = '1' then
                    state <= COMPUTING;
                    else 
                    state <= IDLE;
                    end if; 

                when IDLE =>
                    if start = '1' then
                        state <= COMPUTING; 
                    end if;

                when COMPUTING =>
                     if (input_value = 0) then
                         next_guess := 0;
                         root_guess <= 0;
                    else 
                         next_guess := (root_guess + (input_value / root_guess)) / 2;  
                     end if;   
                    if next_guess = root_guess then
                        finished_flag <= '1';
                        state <= DONE;
                        root <= to_unsigned(next_guess, n);
                        finished <= finished_flag;
                    else
                        root_guess <= next_guess;
                        if start = '0' then
                            state <= IDLE;
                            end if;
                    end if;
                when DONE =>
                    finished_flag <= '1'; 
                    if input_value /= to_integer(A) then
                        state <= SAMPLE;
                    end if;
            end case;
        end if;
    end process;
end rtl;
